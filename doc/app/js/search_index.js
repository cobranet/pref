var search_data = {"index":{"searchIndex":["applicationcontroller","applicationhelper","bid","card","game","hand","livetest","livetestscontroller","livetestshelper","prefgame","prefgamescontroller","prefgameshelper","screen","screencard","user","waiting","welcomecontroller","welcomehelper","<=>()","add()","add_two()","all_cards()","bid()","bid_posible?()","bidder()","cards_played()","cards_played_size()","check_end()","create()","create()","create()","create_two_users()","data()","data()","data()","delete_virtual_users()","display_game()","fgame()","from_game_string()","game_id()","get_cards()","hand()","have_suit?()","hole()","index()","is_end?()","is_playable?()","lead_card()","lead_player()","left()","left()","my_cards()","new()","new()","new()","new()","new()","new()","next_bid()","play()","player?()","player_message()","players()","posible_bids()","right()","right()","same_suit?()","screen()","set_up_game()","show()","shuffle()","taken()","to_game_string()","to_s()","readme_for_app"],"longSearchIndex":["applicationcontroller","applicationhelper","bid","card","game","hand","livetest","livetestscontroller","livetestshelper","prefgame","prefgamescontroller","prefgameshelper","screen","screencard","user","waiting","welcomecontroller","welcomehelper","card#<=>()","waiting::add()","livetest::add_two()","card::all_cards()","bid#bid()","bid#bid_posible?()","bid#bidder()","game#cards_played()","game#cards_played_size()","bid#check_end()","hand#create()","livetestscontroller#create()","prefgame::create()","livetest::create_two_users()","prefgame#data()","prefgamescontroller#data()","screen#data()","livetest::delete_virtual_users()","game#display_game()","prefgame#fgame()","game::from_game_string()","prefgame#game_id()","hand#get_cards()","game#hand()","game#have_suit?()","game#hole()","welcomecontroller#index()","bid#is_end?()","game#is_playable?()","game#lead_card()","game#lead_player()","game#left()","screen#left()","screen#my_cards()","bid::new()","card::new()","game::new()","prefgamescontroller#new()","screen::new()","screencard::new()","bid#next_bid()","game#play()","game#player?()","game#player_message()","game#players()","bid#posible_bids()","game#right()","screen#right()","card#same_suit?()","prefgame#screen()","waiting::set_up_game()","prefgamescontroller#show()","card::shuffle()","game#taken()","game#to_game_string()","card#to_s()",""],"info":[["ApplicationController","","ApplicationController.html","",""],["ApplicationHelper","","ApplicationHelper.html","",""],["Bid","","Bid.html","","<p>Bid in preferans game\n"],["Card","","Card.html","","<p>Class Card Playing card for Preferans there is 32 cards from 7 up from deck\n"],["Game","","Game.html","","<p>Class holding game date One hand of preferans\n"],["Hand","","Hand.html","","<p>Class for holding one deal of preferans hand with inital setup many games\ncan be played\n"],["Livetest","","Livetest.html","","<p>For testing purpose  start new game with virtual players\n"],["LivetestsController","","LivetestsController.html","",""],["LivetestsHelper","","LivetestsHelper.html","",""],["Prefgame","","Prefgame.html","","\n<pre class=\"ruby\"><span class=\"ruby-identifier\">create_table</span> <span class=\"ruby-string\">&quot;prefgames&quot;</span>, :<span class=\"ruby-identifier\">force</span> =<span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-keyword\">true</span> <span class=\"ruby-keyword\">do</span> <span class=\"ruby-operator\">|</span><span class=\"ruby-identifier\">t</span><span class=\"ruby-operator\">|</span>\n  <span class=\"ruby-identifier\">t</span>.<span class=\"ruby-identifier\">string</span>   <span class=\"ruby-string\">&quot;game&quot;</span>\n  <span class=\"ruby-identifier\">t</span>.<span class=\"ruby-identifier\">string</span>   <span class=\"ruby-string\">&quot;status&quot;</span>\n  <span class=\"ruby-identifier\">t</span>.<span class=\"ruby-identifier\">integer</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["PrefgamesController","","PrefgamesController.html","","\n<pre class=\"ruby\"><span class=\"ruby-identifier\">create_table</span> <span class=\"ruby-string\">&quot;prefgames&quot;</span>, :<span class=\"ruby-identifier\">force</span> =<span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-keyword\">true</span> <span class=\"ruby-keyword\">do</span> <span class=\"ruby-operator\">|</span><span class=\"ruby-identifier\">t</span><span class=\"ruby-operator\">|</span>\n  <span class=\"ruby-identifier\">t</span>.<span class=\"ruby-identifier\">string</span>   <span class=\"ruby-string\">&quot;game&quot;</span>\n  <span class=\"ruby-identifier\">t</span>.<span class=\"ruby-identifier\">string</span>   <span class=\"ruby-string\">&quot;status&quot;</span>\n  <span class=\"ruby-identifier\">t</span>.<span class=\"ruby-identifier\">integer</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["PrefgamesHelper","","PrefgamesHelper.html","",""],["Screen","","Screen.html","","<p>this is how particular player see the game he is ALLWAYS “south” but in\nreal game he can’be …\n"],["ScreenCard","","ScreenCard.html","",""],["User","","User.html","",""],["Waiting","","Waiting.html","","<p>Class waiting to set up the game  when player press the start game  he been\nadded in Waiting list and …\n"],["WelcomeController","","WelcomeController.html","",""],["WelcomeHelper","","WelcomeHelper.html","",""],["<=>","Card","Card.html#method-i-3C-3D-3E","(other)","<p>comparable, suits are ordered SDCH for visual separation\n"],["add","Waiting","Waiting.html#method-c-add","(user_id)","<p>Add user to waiting list  if is not already there\n"],["add_two","Livetest","Livetest.html#method-c-add_two","()","<p>add two users for start game\n"],["all_cards","Card","Card.html#method-c-all_cards","()","<p>all cards\n"],["bid","Bid","Bid.html#method-i-bid","(bid)","<p>someone is bidding\n"],["bid_posible?","Bid","Bid.html#method-i-bid_posible-3F","(bid)","<p>check is bid posible all bidding rules are here\n"],["bidder","Bid","Bid.html#method-i-bidder","()","<p>who is bidder, everybody must bid ..or not ? is there is rule that if you\npass once can’t bid later ? …\n"],["cards_played","Game","Game.html#method-i-cards_played","(player)","<p>played ( card on table face up )\n"],["cards_played_size","Game","Game.html#method-i-cards_played_size","()","<p>played cards in current trick\n"],["check_end","Bid","Bid.html#method-i-check_end","()","<p>check is bidding is finish\n"],["create","Hand","Hand.html#method-i-create","()","<p>create new hand\n"],["create","LivetestsController","LivetestsController.html#method-i-create","()","<p>on create add two virtal users\n"],["create","Prefgame","Prefgame.html#method-c-create","(players)",""],["create_two_users","Livetest","Livetest.html#method-c-create_two_users","()","<p>def create partners for tester\n"],["data","Prefgame","Prefgame.html#method-i-data","()",""],["data","PrefgamesController","PrefgamesController.html#method-i-data","()","<p>AJAX call this every X seconds .…\n"],["data","Screen","Screen.html#method-i-data","()",""],["delete_virtual_users","Livetest","Livetest.html#method-c-delete_virtual_users","()","<p>deleting all users\n"],["display_game","Game","Game.html#method-i-display_game","()","<p>display hand  helper to debug\n"],["fgame","Prefgame","Prefgame.html#method-i-fgame","()",""],["from_game_string","Game","Game.html#method-c-from_game_string","(s)","<p>Game is held in database as string  delimitet by ; \nstate;on_move;southcards;eastcards;westcards;holecards;tablecards;southtaken;ea\n…\n"],["game_id","Prefgame","Prefgame.html#method-i-game_id","()",""],["get_cards","Hand","Hand.html#method-i-get_cards","()","<p>returning a array of Card\n"],["hand","Game","Game.html#method-i-hand","(player)","<p>hand for player\n"],["have_suit?","Game","Game.html#method-i-have_suit-3F","(player,suit)","<p>if player have suit\n"],["hole","Game","Game.html#method-i-hole","()","<p>hole cards\n"],["index","WelcomeController","WelcomeController.html#method-i-index","()",""],["is_end?","Bid","Bid.html#method-i-is_end-3F","()",""],["is_playable?","Game","Game.html#method-i-is_playable-3F","(card)","<p>is card playable ?\n"],["lead_card","Game","Game.html#method-i-lead_card","()","<p>first card played in trick\n"],["lead_player","Game","Game.html#method-i-lead_player","()","<p>first player who already  play in trick\n"],["left","Game","Game.html#method-i-left","(seat)","<p>left player of seat\n"],["left","Screen","Screen.html#method-i-left","()","<p>left player of screen player\n"],["my_cards","Screen","Screen.html#method-i-my_cards","()","<p>cards for player screen\n"],["new","Bid","Bid.html#method-c-new","()","<p>bid is string from @@BIDS last bid is minimal contract bidded if bids are\n&gt; ‘2’ then can be bid twince …\n"],["new","Card","Card.html#method-c-new","(card_str)","<p>accepts string value+suit for example 7C , AH, TD\n"],["new","Game","Game.html#method-c-new","(cards)","<p>initialze whith Card.shuffle or Hand\n"],["new","PrefgamesController","PrefgamesController.html#method-i-new","()","<p>try to start new preferans game\n"],["new","Screen","Screen.html#method-c-new","(game,player,users_ids)","<p>Podrazumeva se da je ekran 640  x 400 a da su karte 50 x 80\n"],["new","ScreenCard","ScreenCard.html#method-c-new","(id,x,y,str,playable)",""],["next_bid","Bid","Bid.html#method-i-next_bid","()","<p>next regular bid ( one up from last bid contract)\n"],["play","Game","Game.html#method-i-play","(card)","<p>playing the card\n"],["player?","Game","Game.html#method-i-player-3F","(card)","<p>who has the card ?\n"],["player_message","Game","Game.html#method-i-player_message","(player)","<p>message for player explaing state\n"],["players","Game","Game.html#method-i-players","()","<p>players ring\n"],["posible_bids","Bid","Bid.html#method-i-posible_bids","()","<p>all this methods is for this returning array of possible bids\n"],["right","Game","Game.html#method-i-right","(seat)","<p>right player of seat\n"],["right","Screen","Screen.html#method-i-right","()","<p>right player of screen player\n"],["same_suit?","Card","Card.html#method-i-same_suit-3F","(other)","<p>.… simple if same suit\n"],["screen","Prefgame","Prefgame.html#method-i-screen","(seat)",""],["set_up_game","Waiting","Waiting.html#method-c-set_up_game","()","<p>call when new user is added may we can start a game?\n"],["show","PrefgamesController","PrefgamesController.html#method-i-show","()",""],["shuffle","Card","Card.html#method-c-shuffle","()","<p>shuffling TODO improved later to get better randomes\n"],["taken","Game","Game.html#method-i-taken","(player)","<p>taken ( how much tricks player have )\n"],["to_game_string","Game","Game.html#method-i-to_game_string","()","<p>Game is held in database as string  delimitet by ; \nstate;on_move;southcards;eastcards;westcards;holecards;tablecards;southtaken;ea\n…\n"],["to_s","Card","Card.html#method-i-to_s","()","<p>to_str\n"],["README_FOR_APP","","doc/README_FOR_APP.html","","<p>Preferans\n\n<p>Playing one hand on time and compare with players with same cards.\n"]]}}